import { Node as ENode } from 'estree';
import { Node as SNode, Literal, BooleanLiteral, NumericLiteral, StringLiteral, UnaryExpression, NumericUnaryExpression, ExpressionStatement, SequenceExpression, AssignmentExpression, ReturnStatement, VariableDeclaration, ArrayExpression, Identifier, FunctionExpression, BlockStatement, PrivateIdentifier, BinaryExpression, CallExpression, MemberExpression, IfStatement, ObjectExpression, SwitchStatement, UpdateExpression, FunctionDeclaration, ArrowFunctionExpression, ForStatement, LogicalExpression } from './types';
declare type Node = ENode | SNode;
export declare function isPrivateIdentifier(node: Node): node is PrivateIdentifier;
export declare function isLiteral(node: Node): node is Literal;
export declare function isLiteralString(node: Node): node is StringLiteral;
export declare function isLiteralNumeric(node: Node): node is NumericLiteral;
export declare function isLiteralBoolean(node: Node): node is BooleanLiteral;
export declare function isUnaryExpression(node: Node): node is UnaryExpression;
export declare function isUnaryExpressionNumeric(node: Node): node is NumericUnaryExpression;
export declare function isExpressionStatement(node: Node): node is ExpressionStatement;
export declare function isSequenceExpression(node: Node): node is SequenceExpression;
export declare function isAssignmentExpression(node: Node): node is AssignmentExpression;
export declare function isReturnStatement(node: Node): node is ReturnStatement;
export declare function isVariableDeclaration(node: Node): node is VariableDeclaration;
export declare function isArrayExpression(node: Node): node is ArrayExpression;
export declare function isIdentifier(node: Node): node is Identifier;
export declare function isArrowFunctionExpression(node: Node): node is ArrowFunctionExpression;
export declare function isFunctionExpression(node: Node): node is FunctionExpression;
export declare function isFunctionDeclaration(node: Node): node is FunctionDeclaration;
export declare function isUpdateExpression(node: Node): node is UpdateExpression;
export declare function isCallExpression(node: Node): node is CallExpression;
export declare function isBlockStatement(node: Node): node is BlockStatement;
export declare function isSwitchStatement(node: Node): node is SwitchStatement;
export declare function isBinaryExpression(node: Node): node is BinaryExpression;
export declare function isMemberExpression(node: Node): node is MemberExpression;
export declare function isIfStatement(node: Node): node is IfStatement;
export declare function isForStatement(node: Node): node is ForStatement;
export declare function isObjectExpresesion(node: Node): node is ObjectExpression;
export declare function isLogicalExpression(node: Node): node is LogicalExpression;
export {};
//# sourceMappingURL=guard.d.ts.map